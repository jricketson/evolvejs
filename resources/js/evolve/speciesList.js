// Generated by CoffeeScript 1.4.0
(function() {

  CORE.speciesList = {
    initialise: function() {
      CORE.util.getUserProfile();
      this._windowResized();
      $(window).resize($.proxy(this._windowResized, this));
      $("div.box").each(function() {
        var pos;
        pos = $(this).position();
        return $(this).css("left", pos.left);
      });
      CORE.speciesList._makeDraggable($(".species"));
      $("div.dropTarget").bind("dropstart", function() {
        return $(this).addClass("active");
      }).bind("dropend", function(event) {
        return $(this).removeClass("active");
      });
      $("div.dropTarget.code").bind("drop", function(event) {
        var target;
        target = this;
        $(target).find(".display").empty();
        CORE.data.getSingleSpecies($(event.dragProxy).attr("data-key"), function(species) {
          return CORE.speciesList._displayCode(species[0], target);
        });
        return $(event.dragProxy).fadeOut().remove();
      });
      return $("div.dropTarget.ancestry").bind("drop", function(event) {
        $(this).find(".display").empty();
        CORE.data.getSingleSpecies($(event.dragProxy).attr("data-key"), $.proxy(CORE.speciesList._displayAncestorCallback, CORE.speciesList));
        return $(event.dragProxy).fadeOut().remove();
      });
    },
    _windowResized: function() {
      $("#layoutCenter").height(($("#viewport").innerHeight() - $("#layoutTop").outerHeight() - 21) + "px");
      $("#speciesList").height(($("#layoutCenter").innerHeight() - 20) + "px");
      return $("#boxContainer").height(($("#layoutCenter").innerHeight() - 20) + "px");
    },
    _documentScrolled: function(e) {
      $.debug(e);
      return $("div.dropTarget").css("top", $(document).scrollTop());
    },
    _displayAncestorCallback: function(species) {
      var speciesDiv;
      speciesDiv = $(this._generateSpecieDiv(species[0]));
      $("div.dropTarget.ancestry .display").prepend(speciesDiv);
      if ($("div.dropTarget.ancestry .display .ancestor").length === 1) {
        speciesDiv.addClass("thisSpecies");
        $("div.dropTarget.ancestry .display").append("<hr /><div>First generation children</div>");
        CORE.speciesList.displayChildren(species[0]);
      }
      CORE.speciesList._makeDraggable(speciesDiv);
      return CORE.speciesList.displayAncestor(species[0]);
    },
    _ancestorTemplate: "<div class='ancestor species' data-key='{pk}'>{name} ({scoreList})</div><div class='divider' />",
    _generateSpecieDiv: function(specie) {
      return this._ancestorTemplate.supplant({
        pk: specie.pk,
        name: specie.fields.uniqueName,
        scoreList: specie.fields.scoreList.slice(-5).toString()
      });
    },
    _displayChildrenCallback: function(species) {
      var specie, speciesDiv, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = species.length; _i < _len; _i++) {
        specie = species[_i];
        speciesDiv = $(this._generateSpecieDiv(specie));
        $("div.dropTarget.ancestry .display").append(speciesDiv);
        speciesDiv.addClass("child");
        _results.push(CORE.speciesList._makeDraggable(speciesDiv));
      }
      return _results;
    },
    _makeDraggable: function(element) {
      return $(element).bind("dragstart", function(event) {
        var proxy;
        proxy = $("<div class='dragging' />");
        proxy.appendTo($("body")).attr("data-key", $(this).attr("data-key")).css({
          top: event.clientY + $(document).scrollTop(),
          left: event.clientX + $(document).scrollLeft()
        });
        return proxy;
      }).bind("drag", function(event) {
        return $(event.dragProxy).css({
          top: event.clientY + $(document).scrollTop(),
          left: event.clientX + $(document).scrollLeft()
        });
      }).bind("dragend", function(event) {
        return $(event.dragProxy).fadeOut().remove();
      });
    },
    _displayCode: function(specie, target) {
      var codeArray;
      codeArray = CORE.assembler.convertStringToCode(specie.fields.code);
      $(target).find(".display").html(CORE.assembler.makeDisplayableHtml(codeArray)).attr("data-codeText", CORE.assembler.makeDisplayableText(codeArray)).prepend($(this._generateSpecieDiv(specie))).addClass("thisSpecies");
      return CORE.speciesList._displayDiffIfTwoCodesAreDisplayed();
    },
    _displayDiffIfTwoCodesAreDisplayed: function() {
      var code1, code2, diff, diffs;
      diff = new diff_match_patch();
      code1 = $("#code1").attr("data-codeText");
      code2 = $("#code2").attr("data-codeText");
      if ((code1 != null) && (code2 != null)) {
        diffs = diff.diff_main(code1, code2);
        diff.diff_cleanupSemantic(diffs);
        return $(".differences .display").html(diff.diff_prettyHtml(diffs));
      }
    },
    displayAncestor: function(species) {
      if (species.fields.parentRef !== null) {
        return CORE.data.getSingleSpecies(species.fields.parentRef, $.proxy(CORE.speciesList._displayAncestorCallback, CORE.speciesList));
      }
    },
    displayChildren: function(species) {
      return CORE.data.getChildrenOfSpecies(species.pk, $.proxy(CORE.speciesList._displayChildrenCallback, CORE.speciesList));
    }
  };

  jQuery(document).ready(function() {
    return CORE.speciesList.initialise();
  });

}).call(this);
