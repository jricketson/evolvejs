// Generated by CoffeeScript 1.4.0
(function() {
  var EvolveApplication,
    __hasProp = {}.hasOwnProperty;

  EvolveApplication = (function() {
    var updateDisplay, updateProcessDisplay;

    EvolveApplication.prototype._processStore = {};

    EvolveApplication.prototype._speciesDivStore = {};

    EvolveApplication.prototype._gridDisplay = null;

    EvolveApplication.prototype._timeDelay = 1000;

    EvolveApplication.prototype._currentlyDisplayedProcess = null;

    EvolveApplication.prototype._markerWidth = 0;

    EvolveApplication.prototype._markerHeight = 0;

    EvolveApplication.prototype._colours = (function() {
      var blue, green, red, result, _i, _j, _k;
      result = [];
      for (red = _i = 0x00; 0x00 <= 0xFF ? _i <= 0xFF : _i >= 0xFF; red = _i += 0x33) {
        for (green = _j = 0x00; 0x00 <= 0xFF ? _j <= 0xFF : _j >= 0xFF; green = _j += 0x33) {
          for (blue = _k = 0x00; 0x00 <= 0xFF ? _k <= 0xFF : _k >= 0xFF; blue = _k += 0x33) {
            result.push("#" + (red.toString(16).lpad('00')) + (green.toString(16).lpad('00')) + (blue.toString(16).lpad('00')));
          }
        }
      }
      return result;
    })();

    EvolveApplication.prototype._hideTitle = function() {
      return $("div#ft").animate({
        opacity: 0.3
      }, "slow");
    };

    function EvolveApplication() {
      var _this = this;
      setTimeout(this._hideTitle, 10000);
      CORE.data.getUserProfile().done(function(userProfile) {
        if (userProfile === null) {
          return _this._showEncourageLogin();
        }
      });
      $("div#ft").click(this._hideTitle);
      $("#play").click(function() {
        CORE.environment().start();
        $(this).hide();
        $("#pause").show();
        $("#step").hide();
        return $("#slow").hide();
      });
      $("#slow").click(function() {
        CORE.environment().slow();
        $(this).hide();
        $("#pause").show();
        $("#play").hide();
        return $("#step").hide();
      });
      $("#step").click(function() {
        return CORE.environment().step();
      });
      $("#pause").click(function() {
        CORE.environment().stop();
        $(this).hide();
        $("#play").show();
        $("#step").show();
        return $("#slow").show();
      });
      $("#layoutCenter").createGadget("sidebar", $.proxy(this._sidebarCreatedCallback, this), {
        method: "append"
      });
    }

    EvolveApplication.prototype._showEncourageLogin = function() {
      var close;
      $("div#encourageLogin").show();
      close = function() {
        return $("div#encourageLogin").hide();
      };
      setTimeout(close, 10000);
      $("div#encourageLogin button.close").click(close);
      return $("div#encourageLogin button.login").click(function() {
        return location.href = "/account/login/";
      });
    };

    EvolveApplication.prototype._sidebarCreatedCallback = function(gadget) {
      this.sidebar = gadget;
      CORE.environment().initialise();
      $(document).bind(CORE.environment().EVENT_PROCESS_CREATED, $.proxy(this._processCreateHandler, this));
      $(document).bind(CORE.environment().EVENT_PROCESS_MOVED, $.proxy(this._processMoveHandler, this));
      $(document).bind(CORE.environment().EVENT_PROCESS_KILLED, $.proxy(this._processKillHandler, this));
      $(document).bind(CORE.environment().EVENT_SPECIES_CREATED, $.proxy(this._speciesCreateHandler, this));
      $(document).bind(CORE.environment().EVENT_SPECIES_EXTINCT, $.proxy(this._speciesExtinctHandler, this));
      $(document).bind(CORE.EVENT_LOG_MESSAGE, this._logMessageHandler);
      this._gridDisplay = $("div#gridDisplay").click($.proxy(this._processClickedHandler, this));
      this._speciesList = $(".speciesList").bind("click", $.proxy(this._speciesClickedHandler, this));
      this._calculateMarkerSize();
      $(window).resize($.proxy(this._calculateMarkerSize, this));
      return setInterval($.proxy(this.updateDisplay, this), this._timeDelay);
    };

    EvolveApplication.prototype._calculateMarkerSize = function() {
      var marker, markers, process, _i, _len, _results;
      $("#layoutCenter").height(($("#viewport").innerHeight() - $("#layoutTop").outerHeight() - 3) + "px");
      this._markerWidth = Math.floor(this._gridDisplay.innerWidth() / CORE.environment().getGridX());
      this._markerHeight = Math.floor(this._gridDisplay.innerHeight() / CORE.environment().getGridY());
      markers = this._gridDisplay.find(".process");
      _results = [];
      for (_i = 0, _len = markers.length; _i < _len; _i++) {
        marker = markers[_i];
        process = this._processStore[marker.id];
        if (process != null) {
          _results.push($(marker).css({
            top: this._markerHeight * process.gridY,
            left: this._markerWidth * process.gridX,
            height: this._markerHeight - 1,
            width: this._markerWidth - 1
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    EvolveApplication.prototype._processCreateHandler = function(e, process) {
      var divMarker;
      e.stopImmediatePropagation();
      this._processStore[process.id] = process;
      return divMarker = $("<div class='process species" + process.species.id + "' id='" + process.id + "'>&nbsp;</div>").appendTo(this._gridDisplay).css({
        top: this._markerHeight * process.gridY,
        left: this._markerWidth * process.gridX,
        height: this._markerHeight - 1,
        width: this._markerWidth - 1,
        background: this._speciesDivStore[process.species.id].colour
      });
    };

    EvolveApplication.prototype._processMoveHandler = function(e, process, wrapped) {
      e.stopImmediatePropagation();
      if (wrapped) {
        return this._gridDisplay.find("#" + process.id).stop().css({
          top: this._markerHeight * process.gridY,
          left: this._markerWidth * process.gridX
        });
      } else {
        return this._gridDisplay.find("#" + process.id).stop().animate({
          top: this._markerHeight * process.gridY,
          left: this._markerWidth * process.gridX
        }, "fast");
      }
    };

    EvolveApplication.prototype._removeThisElement = function() {
      return $(this).remove();
    };

    EvolveApplication.prototype._processKillHandler = function(e, process) {
      var processDiv;
      e.stopImmediatePropagation();
      processDiv = this._gridDisplay.find("#" + process.id);
      if (processDiv) {
        processDiv.fadeOut("normal", this._removeThisElement);
      }
      return delete this._processStore[process.id];
    };

    EvolveApplication.prototype._speciesDivTemplate = "<div class=\"species\" id=\"{speciesId}\"><span class=\"id\"></span>" + "<span class=\"totalCount\"></span><span class=\"currentCount\"></span><div style=\"clear:both;\"></div></div>";

    EvolveApplication.prototype._speciesCreateHandler = function(e, species) {
      var colour, contrast, divMarker;
      e.stopImmediatePropagation();
      colour = this._colours.shift();
      contrast = Contrast.match(colour, this._colours);
      divMarker = $(this._speciesDivTemplate.supplant({
        speciesId: species.id
      })).appendTo(this._speciesList).css({
        background: colour,
        color: (contrast !== false ? contrast[1] : "white")
      });
      this._updateSpeciesDiv(divMarker, species);
      return this._speciesDivStore[species.id] = {
        div: divMarker,
        species: species,
        colour: colour
      };
    };

    EvolveApplication.prototype._speciesClickedHandler = function(e) {
      var divClicked;
      e.stopImmediatePropagation();
      divClicked = $(e.target).closest(".species")[0];
      if (divClicked != null) {
        return this._gridDisplay.find(".species" + divClicked.id).fadeOut().fadeIn();
      }
    };

    EvolveApplication.prototype._updateSpeciesDiv = function(div, species) {
      var name;
      name = (species.displayName != null ? species.displayName : species.name);
      if (species.count > 1 || species.saved) {
        div.find(".id").html("{name} ({scoreList})".supplant({
          name: name,
          scoreList: species.scoreList.slice(-5).toString()
        }));
        div.find(".totalCount").html(species.count);
        div.find(".currentCount").html(species.processes.length);
        return div.show();
      } else {
        return div.hide();
      }
    };

    EvolveApplication.prototype._updateSpeciesDisplay = function() {
      var speciesDiv, speciesId, _ref, _results;
      _ref = this._speciesDivStore;
      _results = [];
      for (speciesId in _ref) {
        if (!__hasProp.call(_ref, speciesId)) continue;
        speciesDiv = _ref[speciesId];
        _results.push(this._updateSpeciesDiv(speciesDiv.div, speciesDiv.species));
      }
      return _results;
    };

    EvolveApplication.prototype._speciesExtinctHandler = function(e, species) {
      e.stopImmediatePropagation();
      this._speciesDivStore[species.id].div.fadeOut("normal", this._removeThisElement);
      this._colours.push(this._speciesDivStore[species.id].colour);
      return delete this._speciesDivStore[species.id];
    };

    EvolveApplication.prototype._processClickedHandler = function(e) {
      var divClicked;
      e.stopImmediatePropagation();
      divClicked = $(e.target).closest(".process")[0];
      if (divClicked != null) {
        return this.setCurrentlyDisplayedProcess(this._processStore[divClicked.id]);
      }
    };

    EvolveApplication.prototype._logMessageHandler = function(e, message) {
      e.stopPropagation();
      return $("#sidebar .log").append("<div>" + message + "</div>");
    };

    EvolveApplication.prototype._threadHtml = "<div class=\"pane collapsed thread{threadNumber}\">" + "<div class=\"title\">thread {threadNumber}</div>" + "<table class=\"content\">" + "<tr><td>stack</td><td><div class=\"stack\"></div></td></tr>" + "<tr><td>counters</td><td><div class=\"counter\"></div></td></tr>" + "<tr><td>short term memory</td><td><div class=\"shortTermMemory\"></div></td></tr>" + "<tr><td>execution pointer</td><td><div class=\"executionPointer\"></div></td></tr>" + "<tr><td>read pointer</td><td><div class=\"readPointer\"></div></td></tr>" + "<tr><td>write pointer</td><td><div class=\"writePointer\"></div></td></tr>" + "<tr><td>sleep</td><td><div class=\"sleepCycles\"></div></td></tr>" + "<tr><td>speed</td><td><div class=\"speed\"></div></td></tr>" + "</table>" + "</div>";

    EvolveApplication.prototype._updateProcessDisplay = updateProcessDisplay = function() {
      var displayableCode, i, process, tab, thread, threadDom, _i, _len, _ref, _results;
      tab = $("div.processTab");
      if (!tab.hasClass("expanded")) {
        return;
      }
      process = this._currentlyDisplayedProcess;
      if (process != null) {
        tab.find("div.id").html(process.id);
        tab.find("div.cputime").html(process.cputime);
        tab.find("div.activeThreadCount").html(process.threads.length);
        tab.find("div.name").html(process.name);
        tab.find("div.age").html(process.age);
        tab.find("div.facing").html(process.facing);
        tab.find("div.memoryLength").html(process.memory.length);
        displayableCode = CORE.assembler.makeDisplayableHtml(process.memory);
        if (tab.find("div.code").html() !== displayableCode) {
          tab.find("div.code").html(displayableCode);
        }
        tab.find(".code .current").removeClass("current");
        _ref = process.threads;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          thread = _ref[i];
          threadDom = tab.find(".thread" + i);
          if (threadDom.length === 0) {
            threadDom = $(this._threadHtml.supplant({
              threadNumber: i
            }));
            tab.find("#threads").append(threadDom);
          }
          threadDom.find("div.stack").html(thread.stack.toString());
          threadDom.find("div.counter").html(thread.counter.toString());
          threadDom.find("div.shortTermMemory").html(thread.shortTermMemory.toString());
          threadDom.find("div.executionPointer").html(thread.executionPtr.toString());
          threadDom.find("div.readPointer").html(thread.readPtr.toString());
          threadDom.find("div.writePointer").html(thread.writePtr.toString());
          threadDom.find("div.sleepCycles").html(thread.sleepCycles.toString());
          threadDom.find("div.speed").html(thread.speed.toString());
          tab.find(".code .line" + thread.executionPtr.toString()).addClass("current");
          tab.find(".code .line" + thread.writePtr.toString()).before("<div class='pointers'>w</div>");
          _results.push(tab.find(".code .line" + thread.readPtr.toString()).before("<div class='pointers'>r</div>"));
        }
        return _results;
      } else {
        tab.find("div.id").html("");
        tab.find("div.cputime").html("");
        tab.find("div.activeThreadCount").html("");
        tab.find("div.name").html("");
        tab.find("div.age").html("");
        return tab.find("div.code").html("");
      }
    };

    EvolveApplication.prototype.updateDisplay = updateDisplay = function() {
      $("div#loopCount").html("" + CORE.environment().getLoopCount());
      $("div#processCount").html("" + CORE.environment().getProcessCount());
      $("div#speciesEvolved").html(CORE.species.count);
      $("div#instrRate").html(CORE.environment().current_rate);
      this._updateProcessDisplay();
      return this._updateSpeciesDisplay();
    };

    EvolveApplication.prototype.setCurrentlyDisplayedProcess = function(process) {
      if (this._currentlyDisplayedProcess != null) {
        this._currentlyDisplayedProcess.debug = false;
      }
      if (process != null) {
        this._currentlyDisplayedProcess = process;
      } else {
        this._currentlyDisplayedProcess.debug = true;
      }
      return this._updateProcessDisplay();
    };

    EvolveApplication.prototype.setColourForSpecies = function(species, colour) {
      var speciesEntry;
      speciesEntry = this._speciesDivStore[species.id];
      speciesEntry.colour = colour;
      speciesEntry.div.css({
        background: colour
      });
      return this._gridDisplay.find(".process.species" + species.id).css({
        background: colour
      });
    };

    return EvolveApplication;

  })();

  CORE.evolveApplication = function() {
    return this._evolveApplication || (this._evolveApplication = new EvolveApplication());
  };

  $(document).ready(function() {
    return CORE.evolveApplication();
  });

}).call(this);
