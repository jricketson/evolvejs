// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty;

  if (!window.console) {
    window.console = {
      log: function() {},
      debug: function() {},
      info: function() {}
    };
  }

  window.CORE = CORE || {};

  CORE.NET_RETRY_TIMEOUT = 2000;

  CORE.EVENT_LOG_MESSAGE = "log_message";

  CORE.asyncWhen = function(whenFn, execFn, timeout, timesLeft) {
    timeout = timeout || 500;
    timesLeft = timesLeft || 20;
    if (timesLeft === 0) {
      throw "this asychronous event never happened\n" + whenFn.toString();
    }
    if (whenFn()) {
      return execFn();
    } else {
      return setTimeout((function() {
        return CORE.asyncWhen(whenFn, execFn, timeout, timesLeft - 1);
      }), timeout);
    }
  };

  CORE.trackEvent = function(category, action, label, value) {
    return this.asyncWhen((function() {
      return CORE.pageTracker !== undefined;
    }), (function() {
      return CORE.pageTracker._trackEvent(category, action, label, value);
    }), 1000);
  };

  CORE.throttle = function(fn, delay) {
    var t;
    t = new CORE.Throttle(fn, delay);
    return function() {
      return t.execute.apply(t, arguments);
    };
  };

  CORE.getFunctionName = function(fn) {
    var m;
    m = fn.toString().match(/^\s*function\s+([^\s\(]+)/);
    if (m) {
      return m[1];
    } else {
      return "";
    }
  };

  CORE.removeElementFromArray = function(array, element) {
    var ii;
    ii = 0;
    while (ii < array.length) {
      if (array[ii] === element) {
        break;
      }
      ii += 1;
    }
    return array.splice(ii, 1);
  };

  CORE.convertJsonListToObject = function(list, ObjectConstructor) {
    var item;
    return (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        _results.push(new ObjectConstructor(item));
      }
      return _results;
    })();
  };

  CORE.logToBase = function(x, base) {
    return (Math.log(x)) / (Math.log(base));
  };

  CORE.handleErrorAsError = function(msg, url, l) {
    console.error("ERROR", msg, url, l);
    CORE.logError({
      msg: msg,
      url: url,
      lineNumber: l
    });
    return false;
  };

  CORE.handleErrorAsWarning = function(msg, url, l) {
    console.warn("ERROR", msg, url, l);
    CORE.logError({
      msg: msg,
      url: url,
      lineNumber: l
    });
    return true;
  };

  CORE.logError = function(error) {
    return $.post("/data/errorLog/", error);
  };

  CORE.messageTemplate = "<div class=\"msg\">{msg}</div>";

  CORE.displayMessage = function(msg, timeout) {
    var close, msgDiv;
    timeout = timeout || 10000;
    msgDiv = $(CORE.messageTemplate.supplant({
      msg: msg
    })).hide();
    close = function() {
      return msgDiv.slideUp("normal", function() {
        return msgDiv.remove();
      });
    };
    $("#messages").append(msgDiv);
    msgDiv.slideDown("normal").click(close);
    return setTimeout(close, timeout);
  };

  CORE.sizeProcesses = function() {
    var process, size, _i, _len, _ref, _results;
    _ref = CORE.environment()._currentProcesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      process = _ref[_i];
      size = CORE.sizeInMemory(process);
      if (size > 2000) {
        _results.push($.debug(i, size, process));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  CORE.sizeInMemory = function(obj) {
    var alreadySeenObjects, sim;
    sim = function(obj, recurseLevel) {
      var k, size, thing, v, _i, _len;
      if (recurseLevel == null) {
        recurseLevel = 0;
      }
      size = 0;
      if (alreadySeenObjects.indexOf(obj) > -1 || recurseLevel > 8) {
        return 0;
      }
      if (obj == null) {
        return 1;
      }
      if ($.isArray(obj)) {
        alreadySeenObjects.push(obj);
        for (_i = 0, _len = obj.length; _i < _len; _i++) {
          thing = obj[_i];
          size += sim(thing, recurseLevel + 1);
        }
      } else if ($.isPlainObject(obj) || (obj.constructor !== undefined && ["Process", "Thread", "Species"].indexOf(obj.constructor.name) !== -1)) {
        alreadySeenObjects.push(obj);
        for (k in obj) {
          if (!__hasProp.call(obj, k)) continue;
          v = obj[k];
          size += sim(v, recurseLevel + 1);
        }
      } else if (typeof obj === "object") {
        return 1;
      } else if (typeof obj === "string") {
        return obj.length;
      } else if (typeof obj === "number") {
        return 4;
      } else if (typeof obj === "boolean") {
        return 1;
      } else if (typeof obj === "function") {
        return 1;
      } else {
        return 0;
      }
      return size;
    };
    alreadySeenObjects = [];
    return sim(obj);
  };

  $.ajaxSetup({
    cache: false
  });

  $("#loadingMessage").ajaxStart(function(e) {
    return $(this).show();
  }).ajaxStop(function(e) {
    return $(this).hide();
  });

  $("#ajaxErrorMessage").ajaxError(function(e) {
    var self;
    self = this;
    $(self).stop(true, true).fadeIn(500);
    return setTimeout((function() {
      return $(self).stop(true, true).fadeOut(500);
    }), 5000);
  });

  CORE.Throttle = function(fn, delay) {
    this.fn = fn;
    this.delay = delay != null ? delay : 50;
    return this.executionTimer = null;
  };

  CORE.Throttle.prototype.execute = function() {
    var args, fn;
    if (this.executionTimer) {
      clearTimeout(this.executionTimer);
    }
    args = arguments;
    fn = this.fn;
    return this.executionTimer = setTimeout(function() {
      return fn.apply(null, args);
    }, this.delay);
  };

  if (typeof Object.create !== "function") {
    Object.create = function(o) {
      var F;
      F = function() {};
      F.prototype = o;
      return new F();
    };
  }

  Function.prototype.curry = function() {
    var args, fn;
    args = Array.prototype.slice.call(arguments);
    fn = this;
    return function() {
      var finalArgs, innerArgs;
      innerArgs = Array.prototype.slice.call(arguments);
      finalArgs = args.concat(innerArgs);
      return fn.apply(null, finalArgs);
    };
  };

  String.prototype.supplant = function(o) {
    if (o === null) {
      $.debug("o is null", this);
    }
    return this.replace(/\{([^\{\}]*)\}/g, function(a, b) {
      var r;
      r = o[b];
      if (typeof r === "string" || typeof r === "number") {
        return r;
      } else {
        return a;
      }
    });
  };

  String.prototype.lpad = function(l) {
    return l.substr(0, l.length - this.length) + this;
  };

}).call(this);
