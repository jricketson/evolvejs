// Generated by CoffeeScript 1.4.0
(function() {
  var Process, SparseArray, Thread,
    __hasProp = {}.hasOwnProperty;

  Process = (function() {

    function Process(memory, name) {
      this.memory = memory;
      this.name = name;
      this.threads = [];
      this.cputime = 3000;
      this.gridX = 0;
      this.gridY = 0;
      this.facing = 0;
      this.dead = false;
      this.species = "";
      this.age = 0;
      this.threads.push(new CORE.Thread(this, "0"));
      this.id = CORE.environment.getSerialCode();
    }

    Process.prototype.spliceMemory = function(position, elementCount, element) {
      return this.memory.splice(position, elementCount, element);
    };

    /*
      decrements the processes cputime, if the available cputime ever drops below
      0, the process is killed
    */


    Process.prototype.decrCpuTime = function(decrement) {
      this.cputime -= decrement;
      if (this.cputime < 0) {
        return CORE.environment.killProcess(this);
      }
    };

    Process.prototype.killMe = function() {
      var thread, _i, _len, _ref;
      _ref = this.threads;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        thread = _ref[_i];
        thread.killMe();
      }
      return this.dead = true;
    };

    Process.prototype.incrCpuTime = function(increment) {
      return this.cputime += increment;
    };

    Process.prototype.getHashCode = function() {
      return CORE.util.getHashCode(this.memory);
    };

    Process.prototype.getState = function() {
      var thread, _i, _len, _ref, _results;
      _ref = this.threads;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        thread = _ref[_i];
        _results.push(thread.getState());
      }
      return _results;
    };

    return Process;

  })();

  window.CORE.Process = Process;

  SparseArray = (function() {

    function SparseArray() {}

    SparseArray.prototype.toString = function() {
      var k, v;
      return ((function() {
        var _results;
        _results = [];
        for (k in this) {
          if (!__hasProp.call(this, k)) continue;
          v = this[k];
          _results.push(k + "[" + v + "]");
        }
        return _results;
      }).call(this)).join(',');
    };

    return SparseArray;

  })();

  window.CORE.SparseArray = SparseArray;

  Thread = (function() {

    Thread._maxStackSize = 8;

    function Thread(process, name) {
      this.process = process;
      this.name = name;
      this.stack = [];
      this.counter = new CORE.SparseArray();
      this.shortTermMemory = new CORE.SparseArray();
      this.executionPtr = 0;
      this.readPtr = 0;
      this.writePtr = 0;
      this.speed = 1;
      this.sleepCycles = 0;
    }

    Thread.prototype.step = function() {
      var ii, _i, _ref;
      if (this === this.process.threads[0]) {
        this.process.age += 1;
      }
      if (this.sleepCycles > 0) {
        this.sleepCycles -= 1;
        return !this.process.dead;
      }
      for (ii = _i = 0, _ref = this.speed; 0 <= _ref ? _i < _ref : _i > _ref; ii = 0 <= _ref ? ++_i : --_i) {
        if (this.executionPtr > this.process.memory.length - 1) {
          CORE.environment.killProcess(this.process);
          return false;
        }
        try {
          CORE.vm.execute(this);
        } catch (err) {
          if (this.process != null) {
            $.debug("(" + this.process.name + ") process threw an error: ", this.process);
          }
          $.debug(err);
          CORE.environment.killProcess(this.process);
        }
        if (!this.process.dead) {
          this.process.decrCpuTime(this.speed * this.speed);
          if (this.stack.length > CORE.Thread._maxStackSize && !this.process.dead) {
            this.stack.splice(CORE.Thread._maxStackSize, this.stack.length - CORE.Thread._maxStackSize);
            this.process.decrCpuTime(this.speed * this.speed);
          }
        }
        return !this.process.dead;
      }
    };

    Thread.prototype.getState = function() {
      return [this.stack, this.process.memory.length, this.executionPtr, this.readPtr, this.writePtr];
    };

    Thread.prototype.killMe = function() {};

    return Thread;

  })();

  window.CORE.Thread = Thread;

}).call(this);
