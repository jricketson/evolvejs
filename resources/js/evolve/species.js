// Generated by CoffeeScript 1.4.0
(function() {
  var Species, SpeciesStore;

  Species = (function() {

    function Species(fromObject) {
      this.hashCode = fromObject.hashCode;
      this.count = fromObject.count;
      this.parent = fromObject.parent;
      this.id = fromObject.id;
      this.processes = fromObject.processes;
      this.name = fromObject.name;
      this.code = fromObject.code;
      this.scoreList = [];
      if (fromObject.fields) {
        this.displayName = fromObject.fields.uniqueName;
        this.name = fromObject.fields.name;
        this.id = fromObject.pk;
        this.pk = fromObject.pk;
        this.scoreList = fromObject.fields.scoreList;
      }
      this.sentCount = 0;
      this.successScored = false;
    }

    /*
      gets the id of the next parent in the chain that has been saved
    */


    Species.prototype.getParent = function() {
      var parent;
      parent = this.parent;
      while (parent !== null && parent.id === undefined) {
        parent = parent.parent;
      }
      return parent;
    };

    return Species;

  })();

  SpeciesStore = (function() {
    /*
      The SpeciesStore stores species much like a Java HashMap.
    */

    function SpeciesStore() {
      this.store = {};
    }

    SpeciesStore.prototype.addSpecies = function(species) {
      CORE.species.count += 1;
      if (!this.store.hasOwnProperty(species.hashCode)) {
        this.store[species.hashCode] = [];
      }
      return this.store[species.hashCode].push(species);
    };

    SpeciesStore.prototype.findSpecies = function(memory, hashCode) {
      var equal, ii, jj, speciesArray, storedMemory;
      if (!this.store.hasOwnProperty(hashCode)) {
        return null;
      }
      speciesArray = this.store[hashCode];
      ii = 0;
      while (ii < speciesArray.length) {
        equal = true;
        storedMemory = speciesArray[ii].code;
        if (memory.length === storedMemory.length) {
          jj = 0;
          while (jj < memory.length) {
            if (memory[jj][0] !== storedMemory[jj][0] || memory[jj][1] !== storedMemory[jj][1]) {
              equal = false;
              break;
            }
            jj += 1;
          }
          if (equal) {
            return speciesArray[ii];
          }
        }
        ii += 1;
      }
      return null;
    };

    SpeciesStore.prototype.removeSpecies = function(species) {
      var hashArray;
      jQuery(document).trigger(CORE.environment.EVENT_SPECIES_EXTINCT, [species]);
      hashArray = this.store[species.hashCode];
      if (hashArray === undefined) {
        $.debug("hashArray is undefined");
      }
      return CORE.removeElementFromArray(hashArray, species);
    };

    return SpeciesStore;

  })();

  window.CORE.species = {
    count: 0,
    SpeciesStore: SpeciesStore,
    Species: Species
  };

}).call(this);
